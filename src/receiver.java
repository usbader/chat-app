/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * receiver.java
 *
 * Created on 11-Nov-2011, 13:20:39
 */
package chatApplication;
import java.net.*;
import java.util.ArrayList;
import javax.swing.*;
import java.util.StringTokenizer;
/**
 *
 * @author B&E
 */
public class receiver extends javax.swing.JFrame {

    /** Creates new form receiver */
    public receiver() {
        initComponents();
        
        portNumbers = new ArrayList<Integer>();
        nickNames = new ArrayList<String>();
        IPAddresses = new ArrayList<InetAddress>();
         lstModel= new DefaultListModel();
         listModel.setModel(lstModel);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        txtPort = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtaRcvMsg = new javax.swing.JTextArea();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        listModel = new javax.swing.JList();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel1.setText("Server");

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 12));
        jLabel2.setText("Local Port:");

        txtPort.setText("9898");

        jButton1.setText("Run");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        txtaRcvMsg.setColumns(20);
        txtaRcvMsg.setFont(new java.awt.Font("Courier New", 0, 12)); // NOI18N
        txtaRcvMsg.setRows(5);
        jScrollPane1.setViewportView(txtaRcvMsg);

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel3.setText("Received messages");

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel4.setText("Concurrent users");

        jScrollPane2.setViewportView(listModel);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtPort, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(188, 188, 188)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(47, Short.MAX_VALUE))
            .addComponent(jSeparator1, javax.swing.GroupLayout.DEFAULT_SIZE, 476, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(86, 86, 86)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(30, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtPort, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 182, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 182, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed

int port =Integer.parseInt(txtPort.getText());


try{
    if(receiveSocket==null)
        receiveSocket= new DatagramSocket(port);
}catch(Exception e){}

Thread th = new Thread() {
    public void run(){
           while(true){
               byte[] receiveData = new byte[1024];
               DatagramPacket pkt = new DatagramPacket(receiveData,0,receiveData.length);
             
               try{
              
                   receiveSocket.receive(pkt);
               }catch(Exception e){};
                  String replay = new String(pkt.getData(),0,pkt.getLength());
                 txtaRcvMsg.append(replay+"\n");
              
                  StringTokenizer replayMessage= new StringTokenizer(replay,"*");
                  
                         // decapsulate pkt
                         int srcPort=pkt.getPort();
                         InetAddress srcIP= pkt.getAddress();
                         String msgId = replayMessage.nextToken();
                         int id = Integer.parseInt(msgId);
                      
                          
                          String s=replay;
                          replay = replayMessage.nextToken();
                            
                          byte[] sendData = new byte[1024];
                           int length = replay.length();
                           sendData=replay.getBytes();
                         if(id==3)
                         {
                          // code of connection
                             
                          boolean found = false;
                          
                         
                          
                            for(int i=0;i<nickNames.size();i++){
                              if(nickNames.get(i).equals(replay)){
                                  found=true;
                                  break;
                              }
                          }
                            
                         if(found==false){
                             
                         portNumbers.add(srcPort);
                         nickNames.add(replay);
                         IPAddresses.add(srcIP);
                         lstModel.addElement(srcIP+"  "+srcPort+"  "+replay);
                        
                            int index = portNumbers.indexOf(srcPort);
                          
                      
                          
                             try{
                                 for(int i=0;i<=index;i++){
                                      srcIP = IPAddresses.get(i);
                                     srcPort = portNumbers.get(i);
                                 
                                 
                                    for(int j=0;j<=index;j++){
                                     
                                    String getName = nickNames.get(j)+"*"+3;
                                    
                                    
                                    sendData = getName.getBytes();
                                   sendPkt = new DatagramPacket(sendData,sendData.length,srcIP,srcPort);
                                  receiveSocket.send(sendPkt);
                                    }
                                 }
                                }catch(Exception e){}
                         
                         }
                         else{
                             // found duplicate
                             
                             srcPort=pkt.getPort();
                             srcIP=pkt.getAddress();
                             String message = 0+"*"+3;
                             sendData=message.getBytes();
                             try{
                             sendPkt = new DatagramPacket(sendData,sendData.length,srcIP,srcPort);
                              receiveSocket.send(sendPkt);
                             }catch(Exception e){}
                         }
                         }     
                         
                         else if(id==1)
                         {
                             // code of broadcast message;;
                              int index = portNumbers.indexOf(srcPort);
                                String name = replayMessage.nextToken();
                             
                                String word =name+"*"+id+"*"+replay;
                                sendData = word.getBytes();
                               
                                  try{
                                 for(int i=0;i<=portNumbers.size();i++){
                                      srcIP = IPAddresses.get(i);
                                     srcPort = portNumbers.get(i);
                                 
                                       
                                   sendPkt = new DatagramPacket(sendData,sendData.length,srcIP,srcPort);
                                  receiveSocket.send(sendPkt);
                                 }
                                }catch(Exception e){}
                         }
                         
                         else if(id==4){
                             // code of leaving
                             
                             int targetIndex = nickNames.indexOf(replay);
                             for(int i=0;i<=nickNames.size();i++){
                                 if(i==targetIndex){
                                      nickNames.remove(i);
                                      break;
                                      
                                 }
                             }
                              
                                 try{
                                    
                                    
                                 for(int i=0;i<portNumbers.size();i++){
                                      srcIP = IPAddresses.get(i);
                                     srcPort = portNumbers.get(i);
                                     
                                      
                                      String getName = replay+"*"+4;
                                    sendData = getName.getBytes();
                                   sendPkt = new DatagramPacket(sendData,sendData.length,srcIP,srcPort);
                                  receiveSocket.send(sendPkt);
                                 }
                              
                                   portNumbers.remove(targetIndex);
                                   IPAddresses.remove(targetIndex);
                                   lstModel.removeElementAt(targetIndex);
                                }catch(Exception e){}
                         }
                         else if(id==2){
                             String from = replayMessage.nextToken();
                             String to= replayMessage.nextToken();
                             
                             
                             if(from.equals(to)){
                                 
                             }
                             else{
                                 
                                 for(int i=0;i<portNumbers.size();i++){
                                   
                                     if( to.equals(nickNames.get(i)) || from.equals(nickNames.get(i))){
                                         srcPort = portNumbers.get(i);
                                         srcIP = IPAddresses.get(i);
                                         
                                         String message = replay+"*"+6+"*"+from;
                                         sendData = message.getBytes();
                                         try{
                                          sendPkt = new DatagramPacket(sendData,sendData.length,srcIP,srcPort);
                                          receiveSocket.send(sendPkt);
                                         }catch(Exception e){}
                                        
                                         
                                     }
                                 }
                             }
                         }
                 
       
                
           }//while
          
    }//run
   
};
     
     
    jButton1.setEnabled(false);
    th.start();
   
}//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(receiver.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(receiver.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(receiver.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(receiver.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new receiver().setVisible(true);
            }
        });
    }
    private DatagramSocket receiveSocket;
    private ArrayList<Integer> portNumbers;
    private ArrayList<String> nickNames;
    private ArrayList<InetAddress> IPAddresses;
    private int receiveID;
    private DatagramPacket sendPkt;
    private javax.swing.DefaultListModel lstModel;
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JList listModel;
    private javax.swing.JTextField txtPort;
    private javax.swing.JTextArea txtaRcvMsg;
    // End of variables declaration//GEN-END:variables
}
